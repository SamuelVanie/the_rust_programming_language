#+title: Common Collections


- Collections are stored on the heap, this mean that we don't need to know their size at compile time.

* Vectors

- Vectors allow you to store more than one value in a single data structure that puts all the values next to each other in memory.
- Vectors can only store values of the same type.

** Creating a new Vector

#+BEGIN_SRC rust
let v: Vec<i32> = Vec::new(); // create a new vector v
#+END_SRC

You can also let Rust infers the type of value you want by using the **vec!** macro.

#+BEGIN_SRC rust
let v = vec![1, 2, 3]; // create a vector with initial elements 1, 2, 3
#+END_SRC


*** Updating a Vector

You can use different methods of the vector to modify it. A particular one is the **push** method that lets you add new elements to it.

#+BEGIN_SRC rust
let mut v = Vec::new();

v.push(5);
v.push(6);
v.push(7);
v.push(8);
#+END_SRC

** Reading Elements of Vectors

You can get particular index value in a Vector with two methods : **indexing** or via the **get method**.

#+BEGIN_SRC rust
let v = vec![1, 2, 3, 4, 5];

let third: &i32 = &v[2];
println!("The third element is {third}");

let third: Option<&i32> = v.get(2);
match third {
    Some(third) => println!("The third element is {third}"),
    None => println!("There is no third element."),
}
#+END_SRC

The get method return an /Option/ element so you have to check it with a match block statement.

*[]* will panic if you try to get an element that is out of range of your vector, but the *get* method will not.


#+begin_src rust
let v = vec![1, 2, 3, 4, 5];
let does_not_exist = &v[100]; // will panic
let does_not_exist = v.get(100); // will pass and return None
#+end_src


*** Pay attention to reference borrows

The following code snippet will not work, because the fist element of the vector was borrowed in the first variable (*immutable borrow*).
Then the =v.push(6)= line do a *mutable borrow* (because the vector is of length 5 it's needs to be reallocated and his elements puts in the new allocated area. But the immutable borrow prevent this operation, this leads the rust compiler to *panic*.

#+begin_src rust
let mut v = vec![1, 2, 3, 4, 5];
let first = &v[0];
v.push(6);
println!("The first element is: {first}");
#+end_src



** Iterating over the Values in a Vector

Access each elements and get an immutable reference for each of them :

#+begin_src rust
let v = vec![100, 32, 57];
for i in &v {
    println!("{i}");
}
#+end_src

Mutable iterations to modify the elements :

#+begin_src rust
let mut v = vec![100, 32, 57];
for i in &mut v {
    *i += 50;
}
#+end_src


*Note* : *You can change the vector by adding or removing an element to it in the for loop, you will get a compiler error. The reference of the vector that the for loop holds prevent simultaneous modification of the whole vector*


** Using an Enum to store multiple types

As we said previously, vector cannot store items that have different types.
You can use an Enum which will represent all of the different types you want to store in your vector.
All the enum variants will be considered the same type: that of the enum.

#+begin_src rust
enum SpreadsheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}

let row = vec![
    SpreadsheetCell::Int(3),
    SpreadsheetCell::Text(String::from("blue")),
    SpreadsheetCell::Float(10.12),
]; // the row cell now store an integer, a string, and a float
#+end_src


** Dropping a vector drops its items

#+begin_src rust
{
    let v = vec![1, 3, 4];
    let first = &v[0];
}
  // You will not be able to access first here;
#+end_src



* Strings

String is collection of bytes plus some methods to provide useful functionality when those bytes are interpred as text.
Rust has only one string type in the core language, which is the string slice str that is usually seen in its borrowed form &str.

- *string slices* are references to some UTF-8 encoded string data stored elsewhere.
- *String* type, which is provided by Rust's standard library rather than coded in the core language, is a growable, mutable, owned, UTF-8 encoded string type.

When Rustaceans refer to “strings” in Rust, they might be referring to either the *String* or the *string slice* &str types, not just one of those types. 


** Creating new string

We can create a new string by using the =new()= method or by creating it with some starting string with the =to_string()= method or =from()= method of String.

The *to_string()* method can be applied to all the data types that implements the *Display* trait as string literals do.

#+begin_src rust
// first example
let mut s = String::new();

// second example
let data = "initial content";
let s = data.to_string();

// second method, second variant with literals
let s = "initial content".to_string();

// third method
let s = String::from("initial content");
#+end_src



** Updating a String

- You can concatenate Strings by using the *+* operator
- You can use the *format!* macro to also do so
- *push_str* can also be used
- *push* concatenate only one character at a time at the end of a String


#+begin_src rust
  let mut s1 = String::from("foo");
  let s2 = "bar";
  s1.push_str(s2);  // using push_str to concatenate two strings
  println!("s2 is {s2}");


  let mut s = String::from("lo");
  s.push('l'); // using push to add one character
#+end_src


** String format

Pay attention to the type of strings, some strings are utf16 or are in another language, so the index would be different.


* HashMap

** Creating a New Hash Map

You can create hashmap with ~new~ and add elements with ~insert~.
Example:

#+begin_src rust
use std::collections::HashMap;

let mut scores = HashMap::new();

scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);
#+end_src


All the keys must have the same type and all the values should have the same type.


** Hash Maps and Ownership

For types that implement the ~Copy~ trait, like ~i32~, the values are copied, for owned values like ~String~, the values will be moved and the hash map will be the owner of those values.

#+begin_src rust
use std::collections::HashMap;

let field_name = String::from("Favorite color");
let field_value = String::from("Blue");

let mut map = HashMap::new();
map.insert(field_name, field_value);
// field_name and field_value are invalid at this point, try using them and
// see what compiler error you get!
#+end_src


** Updating a Hash Map

When you want to change the data in a hash map, you have to decide if you want to replace the old value (if the key already exists), keep the old value and ignore the new value, or you could combine the old value and the new value.

*** Overwriting a value

You just need to repeat the insert operation but with a different value

#+begin_src rust
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Blue"), 25);

    println!("{:?}", scores);
#+end_src


*** Adding a key and value only if a key isn't present

#+begin_src rust
    use std::collections::HashMap;

    let mut scores = HashMap::new();
    scores.insert(String::from("Blue"), 10);

    scores.entry(String::from("Yellow")).or_insert(50);
    scores.entry(String::from("Blue")).or_insert(50);

    println!("{:?}", scores);

#+end_src

The entry will permit to check if the key doesn't exists before adding that one and his value.
Entry is defined to return a mutable reference to the value for the corresponding Entry key if that key exists.


*** Updating a value based on the old value

For example the following code, count the number of occurences of a word, if the word already exists the add one to his value, else we insert it with the value of 0, then add one to it.

#+begin_src rust
   use std::collections::HashMap;

    let text = "hello world wonderful world";

    let mut map = HashMap::new();

    for word in text.split_whitespace() {
        let count = map.entry(word).or_insert(0);
        *count += 1;
    }

    println!("{:?}", map);
#+end_src


